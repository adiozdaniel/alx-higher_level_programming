============================
How to Use 100-matrix_mul.py
============================

This module defines a matrix multiplication function ``matrix_mul(m_a, m_b)``.

Usage
=====
``matrix_mul(...)`` returns a new matrix representing the multiplication of
``m_a`` by ``m_b``.

::

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = m_a
    >>> result = matrix_mul(m_a, m_b)
    >>> [[result[row][col] for col in range(len(result[0]))] for row in range(len(result))]
    [[7, 10], [15, 22]]

::

    >>> m_a = [[1, 2]]
    >>> m_b = [
    ... [3, 4],
    ... [5, 6]
    ... ]
    >>> result = matrix_mul(m_a, m_b)
    >>> [[result[row][col] for col in range(len(result[0]))] for row in range(len(result))]
    [[13, 16]]

The function also works with floating-point numbers.

::

    >>> m_a = [
    ... [1.2, 5.5, 6.2],
    ... [4.66, 12.3, -9.2]
    ... ]
    >>> m_b = [
    ... [5.0, 3.3],
    ... [-2.9, 4.4],
    ... [7.2, 4.4]
    ... ]
    >>> result = matrix_mul(m_a, m_b)
    >>> [[math.isclose(num, expected, abs_tol=1e-9) for num, expected in zip(row, expected_row)] for row, expected_row in zip(result, [[34.69, 55.44], [-78.61, 29.018]])
    [[True, True], [True, True]]

Integers and floats can be combined.

::

    >>> m_a = [
    ... [1, 2.2, 3.3, 4],
    ... [5, 6, 7, 8.8],
    ... ]
    >>> m_b = [
    ... [1.1, 2, 3.3],
    ... [4.0, 5.5, 6],
    ... [7, 8, 9],
    ... [10.01, 11, 12.3]
    ... ]
    >>> result = matrix_mul(m_a, m_b)
    >>> [[result[row][col] for col in range(len(result[0]))] for row in range(len(result))]
    [[73.03999999999999, 84.5, 95.4], [166.58800000000002, 195.8, 223.74]]

A minimum of two arguments must be provided. Otherwise, a TypeError is raised.

::

    >>> try: matrix_mul()
    ... except TypeError as e: str(e)
    'matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b''

ValueErrors
===========

If two matrices cannot be multiplied (i.e., the row count of ``m_a`` is not
equal to the column count in ``m_b``), a ValueError is raised.

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [2, 3],
    ... ]
    >>> try: matrix_mul(m_a, m_b)
    ... except ValueError as e: str(e)
    'm_a and m_b can't be multiplied'

The parameters ``m_a`` and ``m_b`` cannot be empty. Otherwise, a ValueError
is raised.

::

    >>> try: matrix_mul([], [[1, 2]])
    ... except ValueError as e: str(e)
    'm_a can't be empty'

::

    >>> try: matrix_mul([[1, 2]], [[]])
    ... except ValueError as e: str(e)
    'm_b can't be empty'

::

    >>> try: matrix_mul([[]], [])
    ... except ValueError as e: str(e)
    'm_a can't be empty'

Invalid Matrices
================

The parameters ``m_a`` and ``m_b`` must be lists. If either parameter is
not a list, a TypeError is raised.

::

    >>> try: matrix_mul("not a list", [[1, 2]])
    ... except TypeError as e: str(e)
    'm_a must be a list'

::

    >>> try: matrix_mul([[1, 2]], "also not a list")
    ... except TypeError as e: str(e)
    'm_b must be a list'

::

    >>> try: matrix_mul("not a list", "also not a list")
    ... except TypeError as e: str(e)
    'm_a must be a list'

::

    >>> try: matrix_mul(None, None)
    ... except TypeError as e: str(e)
    'm_a must be a list'
